{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "candidateNames",
          "type": "string[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "candidates",
      "outputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "voteCount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chairperson",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "election_state",
      "outputs": [
        {
          "internalType": "enum Voting.ELECTION_STATE",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWinnerName",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "candidate",
          "type": "uint256"
        }
      ],
      "name": "vote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "voted",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "vote",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winnerName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "winningCandidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "winningCandidate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/Voting.sol"
  },
  "ast": {
    "absolutePath": "contracts/Voting.sol",
    "exportedSymbols": {
      "Voting": [
        165
      ]
    },
    "id": 166,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.7",
          ".0",
          "<",
          "0.9",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:31:0"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "Voting",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 165,
        "linearizedBaseContracts": [
          165
        ],
        "name": "Voting",
        "nameLocation": "73:6:0",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "canonicalName": "Voting.Voter",
            "id": 6,
            "members": [
              {
                "constant": false,
                "id": 3,
                "mutability": "mutable",
                "name": "voted",
                "nameLocation": "157:5:0",
                "nodeType": "VariableDeclaration",
                "scope": 6,
                "src": "152:10:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 2,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "152:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 5,
                "mutability": "mutable",
                "name": "vote",
                "nameLocation": "216:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 6,
                "src": "211:9:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 4,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "211:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Voter",
            "nameLocation": "136:5:0",
            "nodeType": "StructDefinition",
            "scope": 165,
            "src": "129:131:0",
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.ELECTION_STATE",
            "id": 9,
            "members": [
              {
                "id": 7,
                "name": "OPEN",
                "nameLocation": "297:4:0",
                "nodeType": "EnumValue",
                "src": "297:4:0"
              },
              {
                "id": 8,
                "name": "CLOSED",
                "nameLocation": "302:6:0",
                "nodeType": "EnumValue",
                "src": "302:6:0"
              }
            ],
            "name": "ELECTION_STATE",
            "nameLocation": "273:14:0",
            "nodeType": "EnumDefinition",
            "src": "268:46:0"
          },
          {
            "constant": false,
            "functionSelector": "e2ba53f0",
            "id": 11,
            "mutability": "mutable",
            "name": "winnerName",
            "nameLocation": "333:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 165,
            "src": "319:24:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_string_storage",
              "typeString": "string"
            },
            "typeName": {
              "id": 10,
              "name": "string",
              "nodeType": "ElementaryTypeName",
              "src": "319:6:0",
              "typeDescriptions": {
                "typeIdentifier": "t_string_storage_ptr",
                "typeString": "string"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "d5d58e08",
            "id": 14,
            "mutability": "mutable",
            "name": "election_state",
            "nameLocation": "371:14:0",
            "nodeType": "VariableDeclaration",
            "scope": 165,
            "src": "349:36:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
              "typeString": "enum Voting.ELECTION_STATE"
            },
            "typeName": {
              "id": 13,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 12,
                "name": "ELECTION_STATE",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 9,
                "src": "349:14:0"
              },
              "referencedDeclaration": 9,
              "src": "349:14:0",
              "typeDescriptions": {
                "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                "typeString": "enum Voting.ELECTION_STATE"
              }
            },
            "visibility": "public"
          },
          {
            "canonicalName": "Voting.Candidate",
            "id": 19,
            "members": [
              {
                "constant": false,
                "id": 16,
                "mutability": "mutable",
                "name": "name",
                "nameLocation": "471:4:0",
                "nodeType": "VariableDeclaration",
                "scope": 19,
                "src": "464:11:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage_ptr",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 15,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "464:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 18,
                "mutability": "mutable",
                "name": "voteCount",
                "nameLocation": "523:9:0",
                "nodeType": "VariableDeclaration",
                "scope": 19,
                "src": "518:14:0",
                "stateVariable": false,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 17,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "518:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "visibility": "internal"
              }
            ],
            "name": "Candidate",
            "nameLocation": "444:9:0",
            "nodeType": "StructDefinition",
            "scope": 165,
            "src": "437:133:0",
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "2e4176cf",
            "id": 21,
            "mutability": "mutable",
            "name": "chairperson",
            "nameLocation": "591:11:0",
            "nodeType": "VariableDeclaration",
            "scope": 165,
            "src": "576:26:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 20,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "576:7:0",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "a3ec138d",
            "id": 26,
            "mutability": "mutable",
            "name": "voters",
            "nameLocation": "743:6:0",
            "nodeType": "VariableDeclaration",
            "scope": 165,
            "src": "710:39:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$6_storage_$",
              "typeString": "mapping(address => struct Voting.Voter)"
            },
            "typeName": {
              "id": 25,
              "keyType": {
                "id": 22,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "718:7:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "710:25:0",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$6_storage_$",
                "typeString": "mapping(address => struct Voting.Voter)"
              },
              "valueType": {
                "id": 24,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 23,
                  "name": "Voter",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 6,
                  "src": "729:5:0"
                },
                "referencedDeclaration": 6,
                "src": "729:5:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Voter_$6_storage_ptr",
                  "typeString": "struct Voting.Voter"
                }
              }
            },
            "visibility": "public"
          },
          {
            "constant": false,
            "functionSelector": "3477ee2e",
            "id": 30,
            "mutability": "mutable",
            "name": "candidates",
            "nameLocation": "832:10:0",
            "nodeType": "VariableDeclaration",
            "scope": 165,
            "src": "813:29:0",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
              "typeString": "struct Voting.Candidate[]"
            },
            "typeName": {
              "baseType": {
                "id": 28,
                "nodeType": "UserDefinedTypeName",
                "pathNode": {
                  "id": 27,
                  "name": "Candidate",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 19,
                  "src": "813:9:0"
                },
                "referencedDeclaration": 19,
                "src": "813:9:0",
                "typeDescriptions": {
                  "typeIdentifier": "t_struct$_Candidate_$19_storage_ptr",
                  "typeString": "struct Voting.Candidate"
                }
              },
              "id": 29,
              "nodeType": "ArrayTypeName",
              "src": "813:11:0",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage_ptr",
                "typeString": "struct Voting.Candidate[]"
              }
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 70,
              "nodeType": "Block",
              "src": "898:281:0",
              "statements": [
                {
                  "expression": {
                    "id": 39,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 36,
                      "name": "chairperson",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 21,
                      "src": "908:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 37,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "922:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 38,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "922:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "908:24:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 40,
                  "nodeType": "ExpressionStatement",
                  "src": "908:24:0"
                },
                {
                  "expression": {
                    "id": 44,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 41,
                      "name": "election_state",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "942:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                        "typeString": "enum Voting.ELECTION_STATE"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 42,
                        "name": "ELECTION_STATE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9,
                        "src": "957:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_ELECTION_STATE_$9_$",
                          "typeString": "type(enum Voting.ELECTION_STATE)"
                        }
                      },
                      "id": 43,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "OPEN",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 7,
                      "src": "957:19:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                        "typeString": "enum Voting.ELECTION_STATE"
                      }
                    },
                    "src": "942:34:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                      "typeString": "enum Voting.ELECTION_STATE"
                    }
                  },
                  "id": 45,
                  "nodeType": "ExpressionStatement",
                  "src": "942:34:0"
                },
                {
                  "body": {
                    "id": 68,
                    "nodeType": "Block",
                    "src": "1035:138:0",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "arguments": [
                                {
                                  "baseExpression": {
                                    "id": 61,
                                    "name": "candidateNames",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 33,
                                    "src": "1099:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                                      "typeString": "string memory[] memory"
                                    }
                                  },
                                  "id": 63,
                                  "indexExpression": {
                                    "id": 62,
                                    "name": "i",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 47,
                                    "src": "1114:1:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "1099:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  }
                                },
                                {
                                  "hexValue": "30",
                                  "id": 64,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1145:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_string_memory_ptr",
                                    "typeString": "string memory"
                                  },
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 60,
                                "name": "Candidate",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 19,
                                "src": "1065:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_struct$_Candidate_$19_storage_ptr_$",
                                  "typeString": "type(struct Voting.Candidate storage pointer)"
                                }
                              },
                              "id": 65,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "structConstructorCall",
                              "lValueRequested": false,
                              "names": [
                                "name",
                                "voteCount"
                              ],
                              "nodeType": "FunctionCall",
                              "src": "1065:96:0",
                              "tryCall": false,
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$19_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_struct$_Candidate_$19_memory_ptr",
                                "typeString": "struct Voting.Candidate memory"
                              }
                            ],
                            "expression": {
                              "id": 57,
                              "name": "candidates",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 30,
                              "src": "1049:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                                "typeString": "struct Voting.Candidate storage ref[] storage ref"
                              }
                            },
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "push",
                            "nodeType": "MemberAccess",
                            "src": "1049:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_struct$_Candidate_$19_storage_$dyn_storage_ptr_$_t_struct$_Candidate_$19_storage_$returns$__$bound_to$_t_array$_t_struct$_Candidate_$19_storage_$dyn_storage_ptr_$",
                              "typeString": "function (struct Voting.Candidate storage ref[] storage pointer,struct Voting.Candidate storage ref)"
                            }
                          },
                          "id": 66,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1049:113:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 67,
                        "nodeType": "ExpressionStatement",
                        "src": "1049:113:0"
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 53,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 50,
                      "name": "i",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 47,
                      "src": "1003:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 51,
                        "name": "candidateNames",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 33,
                        "src": "1007:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                          "typeString": "string memory[] memory"
                        }
                      },
                      "id": 52,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1007:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1003:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 69,
                  "initializationExpression": {
                    "assignments": [
                      47
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 47,
                        "mutability": "mutable",
                        "name": "i",
                        "nameLocation": "996:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 69,
                        "src": "991:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 46,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "991:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 49,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 48,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1000:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "991:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 55,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1030:3:0",
                      "subExpression": {
                        "id": 54,
                        "name": "i",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 47,
                        "src": "1030:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 56,
                    "nodeType": "ExpressionStatement",
                    "src": "1030:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "986:187:0"
                }
              ]
            },
            "id": 71,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 34,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 33,
                  "mutability": "mutable",
                  "name": "candidateNames",
                  "nameLocation": "882:14:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 71,
                  "src": "866:30:0",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
                    "typeString": "string[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 31,
                      "name": "string",
                      "nodeType": "ElementaryTypeName",
                      "src": "866:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage_ptr",
                        "typeString": "string"
                      }
                    },
                    "id": 32,
                    "nodeType": "ArrayTypeName",
                    "src": "866:8:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
                      "typeString": "string[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "865:32:0"
            },
            "returnParameters": {
              "id": 35,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "898:0:0"
            },
            "scope": 165,
            "src": "854:325:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 104,
              "nodeType": "Block",
              "src": "1250:302:0",
              "statements": [
                {
                  "assignments": [
                    79
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 79,
                      "mutability": "mutable",
                      "name": "sender",
                      "nameLocation": "1274:6:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 104,
                      "src": "1260:20:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Voter_$6_storage_ptr",
                        "typeString": "struct Voting.Voter"
                      },
                      "typeName": {
                        "id": 78,
                        "nodeType": "UserDefinedTypeName",
                        "pathNode": {
                          "id": 77,
                          "name": "Voter",
                          "nodeType": "IdentifierPath",
                          "referencedDeclaration": 6,
                          "src": "1260:5:0"
                        },
                        "referencedDeclaration": 6,
                        "src": "1260:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$6_storage_ptr",
                          "typeString": "struct Voting.Voter"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 84,
                  "initialValue": {
                    "baseExpression": {
                      "id": 80,
                      "name": "voters",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "1283:6:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_struct$_Voter_$6_storage_$",
                        "typeString": "mapping(address => struct Voting.Voter storage ref)"
                      }
                    },
                    "id": 83,
                    "indexExpression": {
                      "expression": {
                        "id": 81,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": -15,
                        "src": "1290:3:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 82,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1290:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "1283:18:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Voter_$6_storage",
                      "typeString": "struct Voting.Voter storage ref"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1260:41:0"
                },
                {
                  "expression": {
                    "id": 89,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 85,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "1439:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$6_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 87,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voted",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 3,
                      "src": "1439:12:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 88,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1454:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1439:19:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 90,
                  "nodeType": "ExpressionStatement",
                  "src": "1439:19:0"
                },
                {
                  "expression": {
                    "id": 95,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "id": 91,
                        "name": "sender",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 79,
                        "src": "1468:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Voter_$6_storage_ptr",
                          "typeString": "struct Voting.Voter storage pointer"
                        }
                      },
                      "id": 93,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "vote",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 5,
                      "src": "1468:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 94,
                      "name": "candidate",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 74,
                      "src": "1482:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1468:23:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 96,
                  "nodeType": "ExpressionStatement",
                  "src": "1468:23:0"
                },
                {
                  "expression": {
                    "id": 102,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 97,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "1509:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 99,
                        "indexExpression": {
                          "id": 98,
                          "name": "candidate",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 74,
                          "src": "1520:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "1509:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$19_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 100,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "memberName": "voteCount",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 18,
                      "src": "1509:31:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "+=",
                    "rightHandSide": {
                      "hexValue": "31",
                      "id": 101,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1544:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_1_by_1",
                        "typeString": "int_const 1"
                      },
                      "value": "1"
                    },
                    "src": "1509:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "id": 103,
                  "nodeType": "ExpressionStatement",
                  "src": "1509:36:0"
                }
              ]
            },
            "documentation": {
              "id": 72,
              "nodeType": "StructuredDocumentation",
              "src": "1190:18:0",
              "text": "Give your vote"
            },
            "functionSelector": "0121b93f",
            "id": 105,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "vote",
            "nameLocation": "1222:4:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 75,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 74,
                  "mutability": "mutable",
                  "name": "candidate",
                  "nameLocation": "1232:9:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 105,
                  "src": "1227:14:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 73,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1227:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1226:16:0"
            },
            "returnParameters": {
              "id": 76,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1250:0:0"
            },
            "scope": 165,
            "src": "1213:339:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 146,
              "nodeType": "Block",
              "src": "1649:282:0",
              "statements": [
                {
                  "assignments": [
                    111
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 111,
                      "mutability": "mutable",
                      "name": "winningVoteCount",
                      "nameLocation": "1664:16:0",
                      "nodeType": "VariableDeclaration",
                      "scope": 146,
                      "src": "1659:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 110,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "1659:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 113,
                  "initialValue": {
                    "hexValue": "30",
                    "id": 112,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "number",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "1683:1:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_rational_0_by_1",
                      "typeString": "int_const 0"
                    },
                    "value": "0"
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "1659:25:0"
                },
                {
                  "body": {
                    "id": 144,
                    "nodeType": "Block",
                    "src": "1739:186:0",
                    "statements": [
                      {
                        "condition": {
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 130,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "expression": {
                              "baseExpression": {
                                "id": 125,
                                "name": "candidates",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 30,
                                "src": "1757:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                                  "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                }
                              },
                              "id": 127,
                              "indexExpression": {
                                "id": 126,
                                "name": "p",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 115,
                                "src": "1768:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "1757:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Candidate_$19_storage",
                                "typeString": "struct Voting.Candidate storage ref"
                              }
                            },
                            "id": 128,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "voteCount",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 18,
                            "src": "1757:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">",
                          "rightExpression": {
                            "id": 129,
                            "name": "winningVoteCount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 111,
                            "src": "1783:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "1757:42:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "id": 143,
                        "nodeType": "IfStatement",
                        "src": "1753:162:0",
                        "trueBody": {
                          "id": 142,
                          "nodeType": "Block",
                          "src": "1801:114:0",
                          "statements": [
                            {
                              "expression": {
                                "id": 136,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 131,
                                  "name": "winningVoteCount",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 111,
                                  "src": "1819:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "expression": {
                                    "baseExpression": {
                                      "id": 132,
                                      "name": "candidates",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 30,
                                      "src": "1838:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                                        "typeString": "struct Voting.Candidate storage ref[] storage ref"
                                      }
                                    },
                                    "id": 134,
                                    "indexExpression": {
                                      "id": 133,
                                      "name": "p",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 115,
                                      "src": "1849:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "1838:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Candidate_$19_storage",
                                      "typeString": "struct Voting.Candidate storage ref"
                                    }
                                  },
                                  "id": 135,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "voteCount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 18,
                                  "src": "1838:23:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1819:42:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 137,
                              "nodeType": "ExpressionStatement",
                              "src": "1819:42:0"
                            },
                            {
                              "expression": {
                                "id": 140,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftHandSide": {
                                  "id": 138,
                                  "name": "winningCandidate_",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 108,
                                  "src": "1879:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "Assignment",
                                "operator": "=",
                                "rightHandSide": {
                                  "id": 139,
                                  "name": "p",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 115,
                                  "src": "1899:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "1879:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 141,
                              "nodeType": "ExpressionStatement",
                              "src": "1879:21:0"
                            }
                          ]
                        }
                      }
                    ]
                  },
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "id": 121,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "id": 118,
                      "name": "p",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 115,
                      "src": "1711:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "<",
                    "rightExpression": {
                      "expression": {
                        "id": 119,
                        "name": "candidates",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 30,
                        "src": "1715:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                          "typeString": "struct Voting.Candidate storage ref[] storage ref"
                        }
                      },
                      "id": 120,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "length",
                      "nodeType": "MemberAccess",
                      "src": "1715:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "src": "1711:21:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 145,
                  "initializationExpression": {
                    "assignments": [
                      115
                    ],
                    "declarations": [
                      {
                        "constant": false,
                        "id": 115,
                        "mutability": "mutable",
                        "name": "p",
                        "nameLocation": "1704:1:0",
                        "nodeType": "VariableDeclaration",
                        "scope": 145,
                        "src": "1699:6:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 114,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "1699:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "id": 117,
                    "initialValue": {
                      "hexValue": "30",
                      "id": 116,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "number",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1708:1:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_rational_0_by_1",
                        "typeString": "int_const 0"
                      },
                      "value": "0"
                    },
                    "nodeType": "VariableDeclarationStatement",
                    "src": "1699:10:0"
                  },
                  "loopExpression": {
                    "expression": {
                      "id": 123,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "nodeType": "UnaryOperation",
                      "operator": "++",
                      "prefix": false,
                      "src": "1734:3:0",
                      "subExpression": {
                        "id": 122,
                        "name": "p",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 115,
                        "src": "1734:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "id": 124,
                    "nodeType": "ExpressionStatement",
                    "src": "1734:3:0"
                  },
                  "nodeType": "ForStatement",
                  "src": "1694:231:0"
                }
              ]
            },
            "functionSelector": "d28178d7",
            "id": 147,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "winningCandidate",
            "nameLocation": "1569:16:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 106,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1585:2:0"
            },
            "returnParameters": {
              "id": 109,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 108,
                  "mutability": "mutable",
                  "name": "winningCandidate_",
                  "nameLocation": "1626:17:0",
                  "nodeType": "VariableDeclaration",
                  "scope": 147,
                  "src": "1621:22:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 107,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "1621:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1620:24:0"
            },
            "scope": 165,
            "src": "1560:371:0",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "public"
          },
          {
            "body": {
              "id": 163,
              "nodeType": "Block",
              "src": "1974:111:0",
              "statements": [
                {
                  "expression": {
                    "id": 153,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 150,
                      "name": "election_state",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 14,
                      "src": "1984:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                        "typeString": "enum Voting.ELECTION_STATE"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "id": 151,
                        "name": "ELECTION_STATE",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 9,
                        "src": "1999:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_enum$_ELECTION_STATE_$9_$",
                          "typeString": "type(enum Voting.ELECTION_STATE)"
                        }
                      },
                      "id": 152,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "lValueRequested": false,
                      "memberName": "CLOSED",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 8,
                      "src": "1999:21:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                        "typeString": "enum Voting.ELECTION_STATE"
                      }
                    },
                    "src": "1984:36:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_enum$_ELECTION_STATE_$9",
                      "typeString": "enum Voting.ELECTION_STATE"
                    }
                  },
                  "id": 154,
                  "nodeType": "ExpressionStatement",
                  "src": "1984:36:0"
                },
                {
                  "expression": {
                    "id": 161,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 155,
                      "name": "winnerName",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 11,
                      "src": "2030:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "expression": {
                        "baseExpression": {
                          "id": 156,
                          "name": "candidates",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "2043:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Candidate_$19_storage_$dyn_storage",
                            "typeString": "struct Voting.Candidate storage ref[] storage ref"
                          }
                        },
                        "id": 159,
                        "indexExpression": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 157,
                            "name": "winningCandidate",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 147,
                            "src": "2054:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                              "typeString": "function () view returns (uint256)"
                            }
                          },
                          "id": 158,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "2054:18:0",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "2043:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Candidate_$19_storage",
                          "typeString": "struct Voting.Candidate storage ref"
                        }
                      },
                      "id": 160,
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "name",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 16,
                      "src": "2043:35:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_storage",
                        "typeString": "string storage ref"
                      }
                    },
                    "src": "2030:48:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage",
                      "typeString": "string storage ref"
                    }
                  },
                  "id": 162,
                  "nodeType": "ExpressionStatement",
                  "src": "2030:48:0"
                }
              ]
            },
            "functionSelector": "2bfda515",
            "id": 164,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "getWinnerName",
            "nameLocation": "1946:13:0",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 148,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1959:2:0"
            },
            "returnParameters": {
              "id": 149,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1974:0:0"
            },
            "scope": 165,
            "src": "1937:148:0",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          }
        ],
        "scope": 166,
        "src": "64:2023:0",
        "usedErrors": []
      }
    ],
    "src": "32:2055:0"
  },
  "bytecode": "60806040523480156200001157600080fd5b5060405162000a1138038062000a118339810160408190526200003491620001d8565b600180546001600160a81b031916336101000260ff191617905560005b8151811015620000e157600360405180604001604052808484815181106200007d576200007d62000324565b6020908102919091018101518252600091810182905283546001810185559382529081902082518051939460020290910192620000be9284920190620000e9565b506020820151816001015550508080620000d8906200033a565b91505062000051565b5050620003a1565b828054620000f79062000364565b90600052602060002090601f0160209004810192826200011b576000855562000166565b82601f106200013657805160ff191683800117855562000166565b8280016001018555821562000166579182015b828111156200016657825182559160200191906001019062000149565b506200017492915062000178565b5090565b5b8082111562000174576000815560010162000179565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715620001d057620001d06200018f565b604052919050565b60006020808385031215620001ec57600080fd5b82516001600160401b03808211156200020457600080fd5b8185019150601f86818401126200021a57600080fd5b8251828111156200022f576200022f6200018f565b8060051b62000240868201620001a5565b918252848101860191868101908a8411156200025b57600080fd5b87870192505b8383101562000316578251868111156200027b5760008081fd5b8701603f81018c136200028e5760008081fd5b8881015187811115620002a557620002a56200018f565b620002b8818801601f19168b01620001a5565b81815260408e81848601011115620002d05760008081fd5b60005b83811015620002f0578481018201518382018e01528c01620002d3565b83811115620003025760008d85850101525b505084525050918701919087019062000261565b9a9950505050505050505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156200035d57634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200037957607f821691505b602082108114156200039b57634e487b7160e01b600052602260045260246000fd5b50919050565b61066080620003b16000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3ec138d1161005b578063a3ec138d14610100578063d28178d714610144578063d5d58e081461015a578063e2ba53f01461017457600080fd5b80630121b93f1461008d5780632bfda515146100a25780632e4176cf146100aa5780633477ee2e146100df575b600080fd5b6100a061009b36600461049d565b610189565b005b6100a06101e8565b6001546100c29061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f26100ed36600461049d565b610236565b6040516100d6929190610503565b61012d61010e366004610525565b6002602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016100d6565b61014c6102f2565b6040519081526020016100d6565b6001546101679060ff1681565b6040516100d69190610555565b61017c61036f565b6040516100d6919061057d565b336000908152600260205260409020805460ff19166001908117825580820183905560038054849081106101bf576101bf610590565b906000526020600020906002020160010160008282546101df91906105bc565b90915550505050565b6001805460ff19168117905560036101fe6102f2565b8154811061020e5761020e610590565b6000918252602082206002909102018054610228906105d4565b6102339291906103fd565b50565b6003818154811061024657600080fd5b9060005260206000209060020201600091509050806000018054610269906105d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610295906105d4565b80156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b5050505050908060010154905082565b600080805b60035481101561036a57816003828154811061031557610315610590565b9060005260206000209060020201600101541115610358576003818154811061034057610340610590565b90600052602060002090600202016001015491508092505b806103628161060f565b9150506102f7565b505090565b6000805461037c906105d4565b80601f01602080910402602001604051908101604052809291908181526020018280546103a8906105d4565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b828054610409906105d4565b90600052602060002090601f01602090048101928261042b5760008555610478565b82601f1061043c5780548555610478565b8280016001018555821561047857600052602060002091601f016020900482015b8281111561047857825482559160010191906001019061045d565b50610484929150610488565b5090565b5b808211156104845760008155600101610489565b6000602082840312156104af57600080fd5b5035919050565b6000815180845260005b818110156104dc576020818501810151868301820152016104c0565b818111156104ee576000602083870101525b50601f01601f19169290920160200192915050565b60408152600061051660408301856104b6565b90508260208301529392505050565b60006020828403121561053757600080fd5b81356001600160a01b038116811461054e57600080fd5b9392505050565b602081016002831061057757634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061054e60208301846104b6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156105cf576105cf6105a6565b500190565b600181811c908216806105e857607f821691505b6020821081141561060957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610623576106236105a6565b506001019056fea2646970667358221220bc9ed995d92dab0c1373f1ba0df97e94eb7a37ec8d0ae363df2b399ce42ea9e364736f6c63430008090033",
  "bytecodeSha1": "cab54784a83533ded5c21e0746527202d75dc456",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.9+commit.e5eed63a"
  },
  "contractName": "Voting",
  "coverageMap": {
    "branches": {
      "0": {
        "Voting.winningCandidate": {
          "8": [
            1757,
            1799,
            false
          ]
        }
      }
    },
    "statements": {
      "0": {
        "Voting.getWinnerName": {
          "3": [
            1984,
            2020
          ],
          "4": [
            2030,
            2078
          ]
        },
        "Voting.vote": {
          "0": [
            1439,
            1458
          ],
          "1": [
            1468,
            1491
          ],
          "2": [
            1509,
            1545
          ]
        },
        "Voting.winningCandidate": {
          "5": [
            1819,
            1861
          ],
          "6": [
            1879,
            1900
          ],
          "7": [
            1734,
            1737
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3ec138d1161005b578063a3ec138d14610100578063d28178d714610144578063d5d58e081461015a578063e2ba53f01461017457600080fd5b80630121b93f1461008d5780632bfda515146100a25780632e4176cf146100aa5780633477ee2e146100df575b600080fd5b6100a061009b36600461049d565b610189565b005b6100a06101e8565b6001546100c29061010090046001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100f26100ed36600461049d565b610236565b6040516100d6929190610503565b61012d61010e366004610525565b6002602052600090815260409020805460019091015460ff9091169082565b6040805192151583526020830191909152016100d6565b61014c6102f2565b6040519081526020016100d6565b6001546101679060ff1681565b6040516100d69190610555565b61017c61036f565b6040516100d6919061057d565b336000908152600260205260409020805460ff19166001908117825580820183905560038054849081106101bf576101bf610590565b906000526020600020906002020160010160008282546101df91906105bc565b90915550505050565b6001805460ff19168117905560036101fe6102f2565b8154811061020e5761020e610590565b6000918252602082206002909102018054610228906105d4565b6102339291906103fd565b50565b6003818154811061024657600080fd5b9060005260206000209060020201600091509050806000018054610269906105d4565b80601f0160208091040260200160405190810160405280929190818152602001828054610295906105d4565b80156102e25780601f106102b7576101008083540402835291602001916102e2565b820191906000526020600020905b8154815290600101906020018083116102c557829003601f168201915b5050505050908060010154905082565b600080805b60035481101561036a57816003828154811061031557610315610590565b9060005260206000209060020201600101541115610358576003818154811061034057610340610590565b90600052602060002090600202016001015491508092505b806103628161060f565b9150506102f7565b505090565b6000805461037c906105d4565b80601f01602080910402602001604051908101604052809291908181526020018280546103a8906105d4565b80156103f55780601f106103ca576101008083540402835291602001916103f5565b820191906000526020600020905b8154815290600101906020018083116103d857829003601f168201915b505050505081565b828054610409906105d4565b90600052602060002090601f01602090048101928261042b5760008555610478565b82601f1061043c5780548555610478565b8280016001018555821561047857600052602060002091601f016020900482015b8281111561047857825482559160010191906001019061045d565b50610484929150610488565b5090565b5b808211156104845760008155600101610489565b6000602082840312156104af57600080fd5b5035919050565b6000815180845260005b818110156104dc576020818501810151868301820152016104c0565b818111156104ee576000602083870101525b50601f01601f19169290920160200192915050565b60408152600061051660408301856104b6565b90508260208301529392505050565b60006020828403121561053757600080fd5b81356001600160a01b038116811461054e57600080fd5b9392505050565b602081016002831061057757634e487b7160e01b600052602160045260246000fd5b91905290565b60208152600061054e60208301846104b6565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600082198211156105cf576105cf6105a6565b500190565b600181811c908216806105e857607f821691505b6020821081141561060957634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415610623576106236105a6565b506001019056fea2646970667358221220bc9ed995d92dab0c1373f1ba0df97e94eb7a37ec8d0ae363df2b399ce42ea9e364736f6c63430008090033",
  "deployedSourceMap": "64:2023:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1213:339;;;;;;:::i;:::-;;:::i;:::-;;1937:148;;;:::i;576:26::-;;;;;;;;-1:-1:-1;;;;;576:26:0;;;;;;-1:-1:-1;;;;;363:32:1;;;345:51;;333:2;318:18;576:26:0;;;;;;;;813:29;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;710:39::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1664:14:1;;1657:22;1639:41;;1711:2;1696:18;;1689:34;;;;1612:18;710:39:0;1471:258:1;1560:371:0;;;:::i;:::-;;;1880:25:1;;;1868:2;1853:18;1560:371:0;1734:177:1;349:36:0;;;;;;;;;;;;;;;;:::i;319:24::-;;;:::i;:::-;;;;;;;:::i;1213:339::-;1290:10;1260:20;1283:18;;;:6;:18;;;;;1439:19;;-1:-1:-1;;1439:19:0;1454:4;1439:19;;;;;1468:11;;;:23;;;1509:10;:21;;1482:9;;1509:21;;;;;;:::i;:::-;;;;;;;;;;;:31;;;:36;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;1213:339:0:o;1937:148::-;1999:21;1984:36;;-1:-1:-1;;1984:36:0;;;;;2043:10;2054:18;:16;:18::i;:::-;2043:30;;;;;;;;:::i;:::-;;;;;;;;;;;;;2030:48;;;;;:::i;:::-;;;;;;:::i;:::-;;1937:148::o;813:29::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;1560:371::-;1621:22;;;1694:231;1715:10;:17;1711:21;;1694:231;;;1783:16;1757:10;1768:1;1757:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;:42;1753:162;;;1838:10;1849:1;1838:13;;;;;;;;:::i;:::-;;;;;;;;;;;:23;;;1819:42;;1899:1;1879:21;;1753:162;1734:3;;;;:::i;:::-;;;;1694:231;;;;1649:282;1560:371;:::o;319:24::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;-1:-1:-1:-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:180:1;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;407:472::-;449:3;487:5;481:12;514:6;509:3;502:19;539:1;549:162;563:6;560:1;557:13;549:162;;;625:4;681:13;;;677:22;;671:29;653:11;;;649:20;;642:59;578:12;549:162;;;729:6;726:1;723:13;720:87;;;795:1;788:4;779:6;774:3;770:16;766:27;759:38;720:87;-1:-1:-1;861:2:1;840:15;-1:-1:-1;;836:29:1;827:39;;;;868:4;823:50;;407:472;-1:-1:-1;;407:472:1:o;884:291::-;1061:2;1050:9;1043:21;1024:4;1081:45;1122:2;1111:9;1107:18;1099:6;1081:45;:::i;:::-;1073:53;;1162:6;1157:2;1146:9;1142:18;1135:34;884:291;;;;;:::o;1180:286::-;1239:6;1292:2;1280:9;1271:7;1267:23;1263:32;1260:52;;;1308:1;1305;1298:12;1260:52;1334:23;;-1:-1:-1;;;;;1386:31:1;;1376:42;;1366:70;;1432:1;1429;1422:12;1366:70;1455:5;1180:286;-1:-1:-1;;;1180:286:1:o;2048:344::-;2196:2;2181:18;;2229:1;2218:13;;2208:144;;2274:10;2269:3;2265:20;2262:1;2255:31;2309:4;2306:1;2299:15;2337:4;2334:1;2327:15;2208:144;2361:25;;;2048:344;:::o;2397:220::-;2546:2;2535:9;2528:21;2509:4;2566:45;2607:2;2596:9;2592:18;2584:6;2566:45;:::i;2622:127::-;2683:10;2678:3;2674:20;2671:1;2664:31;2714:4;2711:1;2704:15;2738:4;2735:1;2728:15;2754:127;2815:10;2810:3;2806:20;2803:1;2796:31;2846:4;2843:1;2836:15;2870:4;2867:1;2860:15;2886:128;2926:3;2957:1;2953:6;2950:1;2947:13;2944:39;;;2963:18;;:::i;:::-;-1:-1:-1;2999:9:1;;2886:128::o;3019:380::-;3098:1;3094:12;;;;3141;;;3162:61;;3216:4;3208:6;3204:17;3194:27;;3162:61;3269:2;3261:6;3258:14;3238:18;3235:38;3232:161;;;3315:10;3310:3;3306:20;3303:1;3296:31;3350:4;3347:1;3340:15;3378:4;3375:1;3368:15;3232:161;;3019:380;;;:::o;3404:135::-;3443:3;-1:-1:-1;;3464:17:1;;3461:43;;;3484:18;;:::i;:::-;-1:-1:-1;3531:1:1;3520:13;;3404:135::o",
  "language": "Solidity",
  "natspec": {
    "kind": "dev",
    "methods": {
      "vote(uint256)": {
        "notice": "Give your vote"
      }
    },
    "version": 1
  },
  "offset": [
    64,
    2087
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3EC138D GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA3EC138D EQ PUSH2 0x100 JUMPI DUP1 PUSH4 0xD28178D7 EQ PUSH2 0x144 JUMPI DUP1 PUSH4 0xD5D58E08 EQ PUSH2 0x15A JUMPI DUP1 PUSH4 0xE2BA53F0 EQ PUSH2 0x174 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x121B93F EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x2BFDA515 EQ PUSH2 0xA2 JUMPI DUP1 PUSH4 0x2E4176CF EQ PUSH2 0xAA JUMPI DUP1 PUSH4 0x3477EE2E EQ PUSH2 0xDF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0x49D JUMP JUMPDEST PUSH2 0x189 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x1E8 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0xC2 SWAP1 PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xF2 PUSH2 0xED CALLDATASIZE PUSH1 0x4 PUSH2 0x49D JUMP JUMPDEST PUSH2 0x236 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD6 SWAP3 SWAP2 SWAP1 PUSH2 0x503 JUMP JUMPDEST PUSH2 0x12D PUSH2 0x10E CALLDATASIZE PUSH1 0x4 PUSH2 0x525 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 SWAP1 SWAP2 ADD SLOAD PUSH1 0xFF SWAP1 SWAP2 AND SWAP1 DUP3 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE PUSH1 0x20 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 0xD6 JUMP JUMPDEST PUSH2 0x14C PUSH2 0x2F2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xD6 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x167 SWAP1 PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x555 JUMP JUMPDEST PUSH2 0x17C PUSH2 0x36F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD6 SWAP2 SWAP1 PUSH2 0x57D JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR DUP3 SSTORE DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD DUP5 SWAP1 DUP2 LT PUSH2 0x1BF JUMPI PUSH2 0x1BF PUSH2 0x590 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x1DF SWAP2 SWAP1 PUSH2 0x5BC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH1 0xFF NOT AND DUP2 OR SWAP1 SSTORE PUSH1 0x3 PUSH2 0x1FE PUSH2 0x2F2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x20E JUMPI PUSH2 0x20E PUSH2 0x590 JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x2 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH2 0x228 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST PUSH2 0x233 SWAP3 SWAP2 SWAP1 PUSH2 0x3FD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x0 SWAP2 POP SWAP1 POP DUP1 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x269 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x295 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x2E2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x2B7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x2E2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x2C5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x1 ADD SLOAD SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP1 JUMPDEST PUSH1 0x3 SLOAD DUP2 LT ISZERO PUSH2 0x36A JUMPI DUP2 PUSH1 0x3 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x315 JUMPI PUSH2 0x315 PUSH2 0x590 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO PUSH2 0x358 JUMPI PUSH1 0x3 DUP2 DUP2 SLOAD DUP2 LT PUSH2 0x340 JUMPI PUSH2 0x340 PUSH2 0x590 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x2 MUL ADD PUSH1 0x1 ADD SLOAD SWAP2 POP DUP1 SWAP3 POP JUMPDEST DUP1 PUSH2 0x362 DUP2 PUSH2 0x60F JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2F7 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH2 0x37C SWAP1 PUSH2 0x5D4 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3A8 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3F5 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3CA JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3F5 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3D8 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH2 0x409 SWAP1 PUSH2 0x5D4 JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH2 0x42B JUMPI PUSH1 0x0 DUP6 SSTORE PUSH2 0x478 JUMP JUMPDEST DUP3 PUSH1 0x1F LT PUSH2 0x43C JUMPI DUP1 SLOAD DUP6 SSTORE PUSH2 0x478 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x478 JUMPI PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP2 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x478 JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 0x1 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x45D JUMP JUMPDEST POP PUSH2 0x484 SWAP3 SWAP2 POP PUSH2 0x488 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x484 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x489 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x4AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x4DC JUMPI PUSH1 0x20 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 0x4C0 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x4EE JUMPI PUSH1 0x0 PUSH1 0x20 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x40 DUP2 MSTORE PUSH1 0x0 PUSH2 0x516 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x4B6 JUMP JUMPDEST SWAP1 POP DUP3 PUSH1 0x20 DUP4 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x537 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x54E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH1 0x2 DUP4 LT PUSH2 0x577 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP2 SWAP1 MSTORE SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x54E PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x4B6 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x5CF JUMPI PUSH2 0x5CF PUSH2 0x5A6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x5E8 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 EQ ISZERO PUSH2 0x609 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x623 JUMPI PUSH2 0x623 PUSH2 0x5A6 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBC SWAP15 0xD9 SWAP6 0xD9 0x2D 0xAB 0xC SGT PUSH20 0xF1BA0DF97E94EB7A37EC8D0AE363DF2B399CE42E 0xA9 0xE3 PUSH5 0x736F6C6343 STOP ADDMOD MULMOD STOP CALLER ",
  "pcMap": {
    "0": {
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "7": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "8": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10"
    },
    "11": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "12": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "14": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "15": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "REVERT",
      "path": "0"
    },
    "16": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "POP",
      "path": "0"
    },
    "18": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "20": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "LT",
      "path": "0"
    },
    "22": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x88"
    },
    "25": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "26": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "28": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "29": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "31": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "SHR",
      "path": "0"
    },
    "32": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "33": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "38": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "GT",
      "path": "0"
    },
    "39": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5B"
    },
    "42": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "43": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xA3EC138D"
    },
    "49": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "50": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "53": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "54": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "55": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD28178D7"
    },
    "60": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "61": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x144"
    },
    "64": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "65": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "66": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xD5D58E08"
    },
    "71": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "72": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x15A"
    },
    "75": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "76": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "77": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE2BA53F0"
    },
    "82": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "83": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x174"
    },
    "86": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "87": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "89": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "90": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "REVERT",
      "path": "0"
    },
    "91": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "92": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "93": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x121B93F"
    },
    "98": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "99": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x8D"
    },
    "102": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "103": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "104": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2BFDA515"
    },
    "109": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "110": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA2"
    },
    "113": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "114": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "115": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x2E4176CF"
    },
    "120": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "121": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xAA"
    },
    "124": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "125": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "126": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0x3477EE2E"
    },
    "131": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "EQ",
      "path": "0"
    },
    "132": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xDF"
    },
    "135": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "136": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "137": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "139": {
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "DUP1",
      "path": "0"
    },
    "140": {
      "first_revert": true,
      "fn": null,
      "offset": [
        64,
        2087
      ],
      "op": "REVERT",
      "path": "0"
    },
    "141": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "142": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0"
    },
    "145": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x9B"
    },
    "148": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "149": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "151": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49D"
    },
    "154": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMP",
      "path": "0"
    },
    "155": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "156": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x189"
    },
    "159": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMP",
      "path": "0"
    },
    "160": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "161": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "STOP",
      "path": "0"
    },
    "162": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1937,
        2085
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "163": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1937,
        2085
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xA0"
    },
    "166": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1937,
        2085
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1E8"
    },
    "169": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        1937,
        2085
      ],
      "op": "JUMP",
      "path": "0"
    },
    "170": {
      "offset": [
        576,
        602
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "171": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "173": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "174": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xC2"
    },
    "177": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "178": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "181": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "182": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "DIV",
      "path": "0"
    },
    "183": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "185": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "187": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "189": {
      "op": "SHL"
    },
    "190": {
      "op": "SUB"
    },
    "191": {
      "offset": [
        576,
        602
      ],
      "op": "AND",
      "path": "0"
    },
    "192": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "DUP2",
      "path": "0"
    },
    "193": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "JUMP",
      "path": "0"
    },
    "194": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "195": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "197": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "198": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "200": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "202": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "204": {
      "op": "SHL"
    },
    "205": {
      "op": "SUB"
    },
    "206": {
      "op": "SWAP1"
    },
    "207": {
      "op": "SWAP2"
    },
    "208": {
      "op": "AND"
    },
    "209": {
      "op": "DUP2"
    },
    "210": {
      "op": "MSTORE"
    },
    "211": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "213": {
      "op": "ADD"
    },
    "214": {
      "offset": [
        576,
        602
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "215": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "217": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "218": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "DUP1",
      "path": "0"
    },
    "219": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "220": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SUB",
      "path": "0"
    },
    "221": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "222": {
      "fn": "Voting.getWinnerName",
      "offset": [
        576,
        602
      ],
      "op": "RETURN",
      "path": "0"
    },
    "223": {
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "224": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xF2"
    },
    "227": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xED"
    },
    "230": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "231": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "233": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x49D"
    },
    "236": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "237": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "238": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x236"
    },
    "241": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "242": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "243": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "245": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "246": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "249": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "250": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "251": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "252": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x503"
    },
    "255": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "256": {
      "offset": [
        710,
        749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "257": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x12D"
    },
    "260": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x10E"
    },
    "263": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "264": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "266": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x525"
    },
    "269": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        710,
        749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "270": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "271": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "273": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "275": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "276": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "278": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "279": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "DUP2",
      "path": "0"
    },
    "280": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "281": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "283": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "284": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "285": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "DUP1",
      "path": "0"
    },
    "286": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "287": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "289": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "290": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "291": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "ADD",
      "path": "0"
    },
    "292": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "293": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "295": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "296": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "297": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "AND",
      "path": "0"
    },
    "298": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "299": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "DUP3",
      "path": "0"
    },
    "300": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "JUMP",
      "path": "0"
    },
    "301": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "302": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "304": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "DUP1",
      "path": "0"
    },
    "305": {
      "fn": "Voting.getWinnerName",
      "offset": [
        710,
        749
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "306": {
      "op": "SWAP3"
    },
    "307": {
      "op": "ISZERO"
    },
    "308": {
      "op": "ISZERO"
    },
    "309": {
      "op": "DUP4"
    },
    "310": {
      "op": "MSTORE"
    },
    "311": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "313": {
      "op": "DUP4"
    },
    "314": {
      "op": "ADD"
    },
    "315": {
      "op": "SWAP2"
    },
    "316": {
      "op": "SWAP1"
    },
    "317": {
      "op": "SWAP2"
    },
    "318": {
      "op": "MSTORE"
    },
    "319": {
      "op": "ADD"
    },
    "320": {
      "offset": [
        710,
        749
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "323": {
      "op": "JUMP"
    },
    "324": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "325": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x14C"
    },
    "328": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F2"
    },
    "331": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        1560,
        1931
      ],
      "op": "JUMP",
      "path": "0"
    },
    "332": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "333": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "335": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "336": {
      "op": "SWAP1"
    },
    "337": {
      "op": "DUP2"
    },
    "338": {
      "op": "MSTORE"
    },
    "339": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "341": {
      "op": "ADD"
    },
    "342": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "345": {
      "op": "JUMP"
    },
    "346": {
      "offset": [
        349,
        385
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "347": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "349": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "350": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x167"
    },
    "353": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "354": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xFF"
    },
    "356": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "AND",
      "path": "0"
    },
    "357": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "DUP2",
      "path": "0"
    },
    "358": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "JUMP",
      "path": "0"
    },
    "359": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "360": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "362": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "363": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "366": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "367": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "368": {
      "fn": "Voting.winningCandidate",
      "offset": [
        349,
        385
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x555"
    },
    "371": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        349,
        385
      ],
      "op": "JUMP",
      "path": "0"
    },
    "372": {
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "373": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x17C"
    },
    "376": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36F"
    },
    "379": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "380": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "381": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "383": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "384": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0xD6"
    },
    "387": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "388": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "389": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x57D"
    },
    "392": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "393": {
      "fn": "Voting.vote",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "394": {
      "fn": "Voting.vote",
      "offset": [
        1290,
        1300
      ],
      "op": "CALLER",
      "path": "0"
    },
    "395": {
      "fn": "Voting.vote",
      "offset": [
        1260,
        1280
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "397": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "398": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "DUP2",
      "path": "0"
    },
    "399": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "400": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1289
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "402": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "404": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "405": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "407": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "408": {
      "fn": "Voting.vote",
      "offset": [
        1283,
        1301
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "409": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 0
    },
    "410": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "411": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "413": {
      "op": "NOT"
    },
    "414": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "AND",
      "path": "0"
    },
    "415": {
      "fn": "Voting.vote",
      "offset": [
        1454,
        1458
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "417": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "418": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "DUP2",
      "path": "0"
    },
    "419": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "OR",
      "path": "0"
    },
    "420": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "DUP3",
      "path": "0"
    },
    "421": {
      "fn": "Voting.vote",
      "offset": [
        1439,
        1458
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "422": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1479
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 1
    },
    "423": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1479
      ],
      "op": "DUP3",
      "path": "0"
    },
    "424": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1479
      ],
      "op": "ADD",
      "path": "0"
    },
    "425": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1491
      ],
      "op": "DUP4",
      "path": "0"
    },
    "426": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1491
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "427": {
      "fn": "Voting.vote",
      "offset": [
        1468,
        1491
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "428": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1519
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 2,
      "value": "0x3"
    },
    "430": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "DUP1",
      "path": "0"
    },
    "431": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "432": {
      "fn": "Voting.vote",
      "offset": [
        1482,
        1491
      ],
      "op": "DUP5",
      "path": "0"
    },
    "433": {
      "fn": "Voting.vote",
      "offset": [
        1482,
        1491
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "434": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "DUP2",
      "path": "0"
    },
    "435": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "LT",
      "path": "0"
    },
    "436": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BF"
    },
    "439": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "440": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1BF"
    },
    "443": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x590"
    },
    "446": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        1509,
        1530
      ],
      "op": "JUMP",
      "path": "0"
    },
    "447": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "448": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "449": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "451": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "452": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "454": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "456": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "457": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "458": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "460": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "MUL",
      "path": "0"
    },
    "461": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1530
      ],
      "op": "ADD",
      "path": "0"
    },
    "462": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1540
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "464": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1540
      ],
      "op": "ADD",
      "path": "0"
    },
    "465": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1540
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "467": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "DUP3",
      "path": "0"
    },
    "468": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "DUP3",
      "path": "0"
    },
    "469": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "470": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1DF"
    },
    "473": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "474": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "475": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5BC"
    },
    "478": {
      "fn": "Voting.vote",
      "jump": "i",
      "offset": [
        1509,
        1545
      ],
      "op": "JUMP",
      "path": "0"
    },
    "479": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "480": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "481": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "482": {
      "fn": "Voting.vote",
      "offset": [
        1509,
        1545
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "483": {
      "op": "POP"
    },
    "484": {
      "op": "POP"
    },
    "485": {
      "op": "POP"
    },
    "486": {
      "op": "POP"
    },
    "487": {
      "fn": "Voting.vote",
      "jump": "o",
      "offset": [
        1213,
        1552
      ],
      "op": "JUMP",
      "path": "0"
    },
    "488": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1937,
        2085
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "489": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1999,
        2020
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 3,
      "value": "0x1"
    },
    "491": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "DUP1",
      "path": "0"
    },
    "492": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "493": {
      "op": "PUSH1",
      "value": "0xFF"
    },
    "495": {
      "op": "NOT"
    },
    "496": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "AND",
      "path": "0"
    },
    "497": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "DUP2",
      "path": "0"
    },
    "498": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "OR",
      "path": "0"
    },
    "499": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "500": {
      "fn": "Voting.getWinnerName",
      "offset": [
        1984,
        2020
      ],
      "op": "SSTORE",
      "path": "0"
    },
    "501": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2053
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 4,
      "value": "0x3"
    },
    "503": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2054,
        2072
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x1FE"
    },
    "506": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2054,
        2070
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F2"
    },
    "509": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        2054,
        2072
      ],
      "op": "JUMP",
      "path": "0"
    },
    "510": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2054,
        2072
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "511": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "DUP2",
      "path": "0"
    },
    "512": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "513": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "DUP2",
      "path": "0"
    },
    "514": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "LT",
      "path": "0"
    },
    "515": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "518": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "519": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x20E"
    },
    "522": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x590"
    },
    "525": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        2043,
        2073
      ],
      "op": "JUMP",
      "path": "0"
    },
    "526": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "527": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "529": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "530": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "DUP3",
      "path": "0"
    },
    "531": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "532": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "534": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "DUP3",
      "path": "0"
    },
    "535": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "536": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "538": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "539": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "540": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "MUL",
      "path": "0"
    },
    "541": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2043,
        2073
      ],
      "op": "ADD",
      "path": "0"
    },
    "542": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "DUP1",
      "path": "0"
    },
    "543": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "544": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x228"
    },
    "547": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "548": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "551": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        2030,
        2078
      ],
      "op": "JUMP",
      "path": "0"
    },
    "552": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "553": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x233"
    },
    "556": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "557": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "558": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "559": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3FD"
    },
    "562": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        2030,
        2078
      ],
      "op": "JUMP",
      "path": "0"
    },
    "563": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "564": {
      "fn": "Voting.getWinnerName",
      "offset": [
        2030,
        2078
      ],
      "op": "POP",
      "path": "0"
    },
    "565": {
      "fn": "Voting.getWinnerName",
      "jump": "o",
      "offset": [
        1937,
        2085
      ],
      "op": "JUMP",
      "path": "0"
    },
    "566": {
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "567": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "569": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "570": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "571": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "572": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "573": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "LT",
      "path": "0"
    },
    "574": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x246"
    },
    "577": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "578": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "580": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "581": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "REVERT",
      "path": "0"
    },
    "582": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "583": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "584": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "586": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "587": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "589": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "591": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "592": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "593": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "595": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MUL",
      "path": "0"
    },
    "596": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "597": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "599": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "600": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "601": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "602": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "603": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "604": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "606": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "607": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "608": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "609": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x269"
    },
    "612": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "613": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "616": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "617": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "618": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "619": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "621": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "622": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "624": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "625": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "626": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DIV",
      "path": "0"
    },
    "627": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MUL",
      "path": "0"
    },
    "628": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "630": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "631": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "633": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "634": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "635": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "636": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "637": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "639": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "640": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "641": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "642": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "643": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "644": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "645": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "646": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "647": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "649": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "650": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP3",
      "path": "0"
    },
    "651": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "652": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "653": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x295"
    },
    "656": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "657": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "660": {
      "fn": "Voting.getWinnerName",
      "jump": "i",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "661": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "662": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "663": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "664": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E2"
    },
    "667": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "668": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "669": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "671": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "LT",
      "path": "0"
    },
    "672": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2B7"
    },
    "675": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "676": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "679": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "680": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP4",
      "path": "0"
    },
    "681": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "682": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DIV",
      "path": "0"
    },
    "683": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MUL",
      "path": "0"
    },
    "684": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP4",
      "path": "0"
    },
    "685": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "686": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "687": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "689": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "690": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "691": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2E2"
    },
    "694": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "695": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "696": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP3",
      "path": "0"
    },
    "697": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "698": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "699": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "700": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "702": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "703": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "705": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "707": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "708": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "709": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "710": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "711": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "712": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP2",
      "path": "0"
    },
    "713": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "714": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "715": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "717": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "718": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "719": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "721": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "722": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "723": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP4",
      "path": "0"
    },
    "724": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "GT",
      "path": "0"
    },
    "725": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2C5"
    },
    "728": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "729": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP3",
      "path": "0"
    },
    "730": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "731": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SUB",
      "path": "0"
    },
    "732": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "734": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "AND",
      "path": "0"
    },
    "735": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP3",
      "path": "0"
    },
    "736": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "737": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "738": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "739": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "740": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "741": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "742": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "743": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "744": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "745": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP1",
      "path": "0"
    },
    "746": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "748": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "ADD",
      "path": "0"
    },
    "749": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "750": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "751": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "POP",
      "path": "0"
    },
    "752": {
      "fn": "Voting.getWinnerName",
      "offset": [
        813,
        842
      ],
      "op": "DUP3",
      "path": "0"
    },
    "753": {
      "fn": "Voting.getWinnerName",
      "jump": "o",
      "offset": [
        813,
        842
      ],
      "op": "JUMP",
      "path": "0"
    },
    "754": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "755": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1621,
        1643
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "757": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1621,
        1643
      ],
      "op": "DUP1",
      "path": "0"
    },
    "758": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1621,
        1643
      ],
      "op": "DUP1",
      "path": "0"
    },
    "759": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "760": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1715,
        1725
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "762": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1715,
        1732
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "763": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1711,
        1732
      ],
      "op": "DUP2",
      "path": "0"
    },
    "764": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1711,
        1732
      ],
      "op": "LT",
      "path": "0"
    },
    "765": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "766": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x36A"
    },
    "769": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "770": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1783,
        1799
      ],
      "op": "DUP2",
      "path": "0"
    },
    "771": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1767
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x3"
    },
    "773": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1768,
        1769
      ],
      "op": "DUP3",
      "path": "0"
    },
    "774": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "DUP2",
      "path": "0"
    },
    "775": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "776": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "DUP2",
      "path": "0"
    },
    "777": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "LT",
      "path": "0"
    },
    "778": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x315"
    },
    "781": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "782": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x315"
    },
    "785": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x590"
    },
    "788": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        1757,
        1770
      ],
      "op": "JUMP",
      "path": "0"
    },
    "789": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "790": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "791": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "793": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "794": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "796": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "798": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "799": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "800": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "802": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "MUL",
      "path": "0"
    },
    "803": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1770
      ],
      "op": "ADD",
      "path": "0"
    },
    "804": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1780
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "806": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1780
      ],
      "op": "ADD",
      "path": "0"
    },
    "807": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1780
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "808": {
      "branch": 8,
      "fn": "Voting.winningCandidate",
      "offset": [
        1757,
        1799
      ],
      "op": "GT",
      "path": "0"
    },
    "809": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1753,
        1915
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "810": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1753,
        1915
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x358"
    },
    "813": {
      "branch": 8,
      "fn": "Voting.winningCandidate",
      "offset": [
        1753,
        1915
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "814": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1848
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 5,
      "value": "0x3"
    },
    "816": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1849,
        1850
      ],
      "op": "DUP2",
      "path": "0"
    },
    "817": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "DUP2",
      "path": "0"
    },
    "818": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "819": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "DUP2",
      "path": "0"
    },
    "820": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "LT",
      "path": "0"
    },
    "821": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x340"
    },
    "824": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "825": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x340"
    },
    "828": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x590"
    },
    "831": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        1838,
        1851
      ],
      "op": "JUMP",
      "path": "0"
    },
    "832": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "833": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "834": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "836": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "837": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "839": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "841": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "842": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "843": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2"
    },
    "845": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "MUL",
      "path": "0"
    },
    "846": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1851
      ],
      "op": "ADD",
      "path": "0"
    },
    "847": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1861
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "849": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1861
      ],
      "op": "ADD",
      "path": "0"
    },
    "850": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1838,
        1861
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "851": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1819,
        1861
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "852": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1819,
        1861
      ],
      "op": "POP",
      "path": "0"
    },
    "853": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1899,
        1900
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 6
    },
    "854": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1879,
        1900
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "855": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1879,
        1900
      ],
      "op": "POP",
      "path": "0"
    },
    "856": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1753,
        1915
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "857": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "DUP1",
      "path": "0",
      "statement": 7
    },
    "858": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x362"
    },
    "861": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "DUP2",
      "path": "0"
    },
    "862": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x60F"
    },
    "865": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        1734,
        1737
      ],
      "op": "JUMP",
      "path": "0"
    },
    "866": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "867": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "868": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "POP",
      "path": "0"
    },
    "869": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1734,
        1737
      ],
      "op": "POP",
      "path": "0"
    },
    "870": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x2F7"
    },
    "873": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "JUMP",
      "path": "0"
    },
    "874": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "875": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1694,
        1925
      ],
      "op": "POP",
      "path": "0"
    },
    "876": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1649,
        1931
      ],
      "op": "POP",
      "path": "0"
    },
    "877": {
      "fn": "Voting.winningCandidate",
      "offset": [
        1560,
        1931
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "878": {
      "fn": "Voting.winningCandidate",
      "jump": "o",
      "offset": [
        1560,
        1931
      ],
      "op": "JUMP",
      "path": "0"
    },
    "879": {
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "880": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "882": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "883": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "884": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x37C"
    },
    "887": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "888": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "891": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "892": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "893": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "894": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "896": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "897": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "899": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "900": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "901": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DIV",
      "path": "0"
    },
    "902": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MUL",
      "path": "0"
    },
    "903": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "905": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "906": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "908": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "909": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "910": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "911": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "912": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "914": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "915": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "916": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP3",
      "path": "0"
    },
    "917": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "918": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "919": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "920": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "921": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "922": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "924": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "925": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "926": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "927": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "928": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3A8"
    },
    "931": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "932": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x5D4"
    },
    "935": {
      "fn": "Voting.winningCandidate",
      "jump": "i",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "936": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "937": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "938": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ISZERO",
      "path": "0"
    },
    "939": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F5"
    },
    "942": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "943": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "944": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "946": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "LT",
      "path": "0"
    },
    "947": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3CA"
    },
    "950": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "951": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x100"
    },
    "954": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "955": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP4",
      "path": "0"
    },
    "956": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "957": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DIV",
      "path": "0"
    },
    "958": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MUL",
      "path": "0"
    },
    "959": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP4",
      "path": "0"
    },
    "960": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "961": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "962": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "964": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "965": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "966": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3F5"
    },
    "969": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "970": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "971": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "972": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "973": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "974": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "975": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "977": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "978": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "980": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "982": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "KECCAK256",
      "path": "0"
    },
    "983": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "984": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "985": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "986": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SLOAD",
      "path": "0"
    },
    "987": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "988": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "989": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "990": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1"
    },
    "992": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "993": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "994": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "996": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "997": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP1",
      "path": "0"
    },
    "998": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP4",
      "path": "0"
    },
    "999": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "GT",
      "path": "0"
    },
    "1000": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH2",
      "path": "0",
      "value": "0x3D8"
    },
    "1003": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "1004": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1005": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "1006": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SUB",
      "path": "0"
    },
    "1007": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1F"
    },
    "1009": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "AND",
      "path": "0"
    },
    "1010": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP3",
      "path": "0"
    },
    "1011": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "ADD",
      "path": "0"
    },
    "1012": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "SWAP2",
      "path": "0"
    },
    "1013": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "1014": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "POP",
      "path": "0"
    },
    "1015": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "POP",
      "path": "0"
    },
    "1016": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "POP",
      "path": "0"
    },
    "1017": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "POP",
      "path": "0"
    },
    "1018": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "POP",
      "path": "0"
    },
    "1019": {
      "fn": "Voting.winningCandidate",
      "offset": [
        319,
        343
      ],
      "op": "DUP2",
      "path": "0"
    },
    "1020": {
      "fn": "Voting.winningCandidate",
      "jump": "o",
      "offset": [
        319,
        343
      ],
      "op": "JUMP",
      "path": "0"
    },
    "1021": {
      "op": "JUMPDEST"
    },
    "1022": {
      "op": "DUP3"
    },
    "1023": {
      "op": "DUP1"
    },
    "1024": {
      "op": "SLOAD"
    },
    "1025": {
      "op": "PUSH2",
      "value": "0x409"
    },
    "1028": {
      "op": "SWAP1"
    },
    "1029": {
      "op": "PUSH2",
      "value": "0x5D4"
    },
    "1032": {
      "jump": "i",
      "op": "JUMP"
    },
    "1033": {
      "op": "JUMPDEST"
    },
    "1034": {
      "op": "SWAP1"
    },
    "1035": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1037": {
      "op": "MSTORE"
    },
    "1038": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1040": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1042": {
      "op": "KECCAK256"
    },
    "1043": {
      "op": "SWAP1"
    },
    "1044": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1046": {
      "op": "ADD"
    },
    "1047": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1049": {
      "op": "SWAP1"
    },
    "1050": {
      "op": "DIV"
    },
    "1051": {
      "op": "DUP2"
    },
    "1052": {
      "op": "ADD"
    },
    "1053": {
      "op": "SWAP3"
    },
    "1054": {
      "op": "DUP3"
    },
    "1055": {
      "op": "PUSH2",
      "value": "0x42B"
    },
    "1058": {
      "op": "JUMPI"
    },
    "1059": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1061": {
      "op": "DUP6"
    },
    "1062": {
      "op": "SSTORE"
    },
    "1063": {
      "op": "PUSH2",
      "value": "0x478"
    },
    "1066": {
      "op": "JUMP"
    },
    "1067": {
      "op": "JUMPDEST"
    },
    "1068": {
      "op": "DUP3"
    },
    "1069": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1071": {
      "op": "LT"
    },
    "1072": {
      "op": "PUSH2",
      "value": "0x43C"
    },
    "1075": {
      "op": "JUMPI"
    },
    "1076": {
      "op": "DUP1"
    },
    "1077": {
      "op": "SLOAD"
    },
    "1078": {
      "op": "DUP6"
    },
    "1079": {
      "op": "SSTORE"
    },
    "1080": {
      "op": "PUSH2",
      "value": "0x478"
    },
    "1083": {
      "op": "JUMP"
    },
    "1084": {
      "op": "JUMPDEST"
    },
    "1085": {
      "op": "DUP3"
    },
    "1086": {
      "op": "DUP1"
    },
    "1087": {
      "op": "ADD"
    },
    "1088": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1090": {
      "op": "ADD"
    },
    "1091": {
      "op": "DUP6"
    },
    "1092": {
      "op": "SSTORE"
    },
    "1093": {
      "op": "DUP3"
    },
    "1094": {
      "op": "ISZERO"
    },
    "1095": {
      "op": "PUSH2",
      "value": "0x478"
    },
    "1098": {
      "op": "JUMPI"
    },
    "1099": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1101": {
      "op": "MSTORE"
    },
    "1102": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1104": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1106": {
      "op": "KECCAK256"
    },
    "1107": {
      "op": "SWAP2"
    },
    "1108": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1110": {
      "op": "ADD"
    },
    "1111": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1113": {
      "op": "SWAP1"
    },
    "1114": {
      "op": "DIV"
    },
    "1115": {
      "op": "DUP3"
    },
    "1116": {
      "op": "ADD"
    },
    "1117": {
      "op": "JUMPDEST"
    },
    "1118": {
      "op": "DUP3"
    },
    "1119": {
      "op": "DUP2"
    },
    "1120": {
      "op": "GT"
    },
    "1121": {
      "op": "ISZERO"
    },
    "1122": {
      "op": "PUSH2",
      "value": "0x478"
    },
    "1125": {
      "op": "JUMPI"
    },
    "1126": {
      "op": "DUP3"
    },
    "1127": {
      "op": "SLOAD"
    },
    "1128": {
      "op": "DUP3"
    },
    "1129": {
      "op": "SSTORE"
    },
    "1130": {
      "op": "SWAP2"
    },
    "1131": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1133": {
      "op": "ADD"
    },
    "1134": {
      "op": "SWAP2"
    },
    "1135": {
      "op": "SWAP1"
    },
    "1136": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1138": {
      "op": "ADD"
    },
    "1139": {
      "op": "SWAP1"
    },
    "1140": {
      "op": "PUSH2",
      "value": "0x45D"
    },
    "1143": {
      "op": "JUMP"
    },
    "1144": {
      "op": "JUMPDEST"
    },
    "1145": {
      "op": "POP"
    },
    "1146": {
      "op": "PUSH2",
      "value": "0x484"
    },
    "1149": {
      "op": "SWAP3"
    },
    "1150": {
      "op": "SWAP2"
    },
    "1151": {
      "op": "POP"
    },
    "1152": {
      "op": "PUSH2",
      "value": "0x488"
    },
    "1155": {
      "jump": "i",
      "op": "JUMP"
    },
    "1156": {
      "op": "JUMPDEST"
    },
    "1157": {
      "op": "POP"
    },
    "1158": {
      "op": "SWAP1"
    },
    "1159": {
      "jump": "o",
      "op": "JUMP"
    },
    "1160": {
      "op": "JUMPDEST"
    },
    "1161": {
      "op": "JUMPDEST"
    },
    "1162": {
      "op": "DUP1"
    },
    "1163": {
      "op": "DUP3"
    },
    "1164": {
      "op": "GT"
    },
    "1165": {
      "op": "ISZERO"
    },
    "1166": {
      "op": "PUSH2",
      "value": "0x484"
    },
    "1169": {
      "op": "JUMPI"
    },
    "1170": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1172": {
      "op": "DUP2"
    },
    "1173": {
      "op": "SSTORE"
    },
    "1174": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1176": {
      "op": "ADD"
    },
    "1177": {
      "op": "PUSH2",
      "value": "0x489"
    },
    "1180": {
      "op": "JUMP"
    },
    "1181": {
      "op": "JUMPDEST"
    },
    "1182": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1184": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1186": {
      "op": "DUP3"
    },
    "1187": {
      "op": "DUP5"
    },
    "1188": {
      "op": "SUB"
    },
    "1189": {
      "op": "SLT"
    },
    "1190": {
      "op": "ISZERO"
    },
    "1191": {
      "op": "PUSH2",
      "value": "0x4AF"
    },
    "1194": {
      "op": "JUMPI"
    },
    "1195": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1197": {
      "op": "DUP1"
    },
    "1198": {
      "op": "REVERT"
    },
    "1199": {
      "op": "JUMPDEST"
    },
    "1200": {
      "op": "POP"
    },
    "1201": {
      "op": "CALLDATALOAD"
    },
    "1202": {
      "op": "SWAP2"
    },
    "1203": {
      "op": "SWAP1"
    },
    "1204": {
      "op": "POP"
    },
    "1205": {
      "jump": "o",
      "op": "JUMP"
    },
    "1206": {
      "op": "JUMPDEST"
    },
    "1207": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1209": {
      "op": "DUP2"
    },
    "1210": {
      "op": "MLOAD"
    },
    "1211": {
      "op": "DUP1"
    },
    "1212": {
      "op": "DUP5"
    },
    "1213": {
      "op": "MSTORE"
    },
    "1214": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1216": {
      "op": "JUMPDEST"
    },
    "1217": {
      "op": "DUP2"
    },
    "1218": {
      "op": "DUP2"
    },
    "1219": {
      "op": "LT"
    },
    "1220": {
      "op": "ISZERO"
    },
    "1221": {
      "op": "PUSH2",
      "value": "0x4DC"
    },
    "1224": {
      "op": "JUMPI"
    },
    "1225": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1227": {
      "op": "DUP2"
    },
    "1228": {
      "op": "DUP6"
    },
    "1229": {
      "op": "ADD"
    },
    "1230": {
      "op": "DUP2"
    },
    "1231": {
      "op": "ADD"
    },
    "1232": {
      "op": "MLOAD"
    },
    "1233": {
      "op": "DUP7"
    },
    "1234": {
      "op": "DUP4"
    },
    "1235": {
      "op": "ADD"
    },
    "1236": {
      "op": "DUP3"
    },
    "1237": {
      "op": "ADD"
    },
    "1238": {
      "op": "MSTORE"
    },
    "1239": {
      "op": "ADD"
    },
    "1240": {
      "op": "PUSH2",
      "value": "0x4C0"
    },
    "1243": {
      "op": "JUMP"
    },
    "1244": {
      "op": "JUMPDEST"
    },
    "1245": {
      "op": "DUP2"
    },
    "1246": {
      "op": "DUP2"
    },
    "1247": {
      "op": "GT"
    },
    "1248": {
      "op": "ISZERO"
    },
    "1249": {
      "op": "PUSH2",
      "value": "0x4EE"
    },
    "1252": {
      "op": "JUMPI"
    },
    "1253": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1255": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1257": {
      "op": "DUP4"
    },
    "1258": {
      "op": "DUP8"
    },
    "1259": {
      "op": "ADD"
    },
    "1260": {
      "op": "ADD"
    },
    "1261": {
      "op": "MSTORE"
    },
    "1262": {
      "op": "JUMPDEST"
    },
    "1263": {
      "op": "POP"
    },
    "1264": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1266": {
      "op": "ADD"
    },
    "1267": {
      "op": "PUSH1",
      "value": "0x1F"
    },
    "1269": {
      "op": "NOT"
    },
    "1270": {
      "op": "AND"
    },
    "1271": {
      "op": "SWAP3"
    },
    "1272": {
      "op": "SWAP1"
    },
    "1273": {
      "op": "SWAP3"
    },
    "1274": {
      "op": "ADD"
    },
    "1275": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1277": {
      "op": "ADD"
    },
    "1278": {
      "op": "SWAP3"
    },
    "1279": {
      "op": "SWAP2"
    },
    "1280": {
      "op": "POP"
    },
    "1281": {
      "op": "POP"
    },
    "1282": {
      "jump": "o",
      "op": "JUMP"
    },
    "1283": {
      "op": "JUMPDEST"
    },
    "1284": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1286": {
      "op": "DUP2"
    },
    "1287": {
      "op": "MSTORE"
    },
    "1288": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1290": {
      "op": "PUSH2",
      "value": "0x516"
    },
    "1293": {
      "op": "PUSH1",
      "value": "0x40"
    },
    "1295": {
      "op": "DUP4"
    },
    "1296": {
      "op": "ADD"
    },
    "1297": {
      "op": "DUP6"
    },
    "1298": {
      "op": "PUSH2",
      "value": "0x4B6"
    },
    "1301": {
      "jump": "i",
      "op": "JUMP"
    },
    "1302": {
      "op": "JUMPDEST"
    },
    "1303": {
      "op": "SWAP1"
    },
    "1304": {
      "op": "POP"
    },
    "1305": {
      "op": "DUP3"
    },
    "1306": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1308": {
      "op": "DUP4"
    },
    "1309": {
      "op": "ADD"
    },
    "1310": {
      "op": "MSTORE"
    },
    "1311": {
      "op": "SWAP4"
    },
    "1312": {
      "op": "SWAP3"
    },
    "1313": {
      "op": "POP"
    },
    "1314": {
      "op": "POP"
    },
    "1315": {
      "op": "POP"
    },
    "1316": {
      "jump": "o",
      "op": "JUMP"
    },
    "1317": {
      "op": "JUMPDEST"
    },
    "1318": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1320": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1322": {
      "op": "DUP3"
    },
    "1323": {
      "op": "DUP5"
    },
    "1324": {
      "op": "SUB"
    },
    "1325": {
      "op": "SLT"
    },
    "1326": {
      "op": "ISZERO"
    },
    "1327": {
      "op": "PUSH2",
      "value": "0x537"
    },
    "1330": {
      "op": "JUMPI"
    },
    "1331": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1333": {
      "op": "DUP1"
    },
    "1334": {
      "op": "REVERT"
    },
    "1335": {
      "op": "JUMPDEST"
    },
    "1336": {
      "op": "DUP2"
    },
    "1337": {
      "op": "CALLDATALOAD"
    },
    "1338": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1340": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1342": {
      "op": "PUSH1",
      "value": "0xA0"
    },
    "1344": {
      "op": "SHL"
    },
    "1345": {
      "op": "SUB"
    },
    "1346": {
      "op": "DUP2"
    },
    "1347": {
      "op": "AND"
    },
    "1348": {
      "op": "DUP2"
    },
    "1349": {
      "op": "EQ"
    },
    "1350": {
      "op": "PUSH2",
      "value": "0x54E"
    },
    "1353": {
      "op": "JUMPI"
    },
    "1354": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1356": {
      "op": "DUP1"
    },
    "1357": {
      "op": "REVERT"
    },
    "1358": {
      "op": "JUMPDEST"
    },
    "1359": {
      "op": "SWAP4"
    },
    "1360": {
      "op": "SWAP3"
    },
    "1361": {
      "op": "POP"
    },
    "1362": {
      "op": "POP"
    },
    "1363": {
      "op": "POP"
    },
    "1364": {
      "jump": "o",
      "op": "JUMP"
    },
    "1365": {
      "op": "JUMPDEST"
    },
    "1366": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1368": {
      "op": "DUP2"
    },
    "1369": {
      "op": "ADD"
    },
    "1370": {
      "op": "PUSH1",
      "value": "0x2"
    },
    "1372": {
      "op": "DUP4"
    },
    "1373": {
      "op": "LT"
    },
    "1374": {
      "op": "PUSH2",
      "value": "0x577"
    },
    "1377": {
      "op": "JUMPI"
    },
    "1378": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1383": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1385": {
      "op": "SHL"
    },
    "1386": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1388": {
      "op": "MSTORE"
    },
    "1389": {
      "op": "PUSH1",
      "value": "0x21"
    },
    "1391": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1393": {
      "op": "MSTORE"
    },
    "1394": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1396": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1398": {
      "op": "REVERT"
    },
    "1399": {
      "op": "JUMPDEST"
    },
    "1400": {
      "op": "SWAP2"
    },
    "1401": {
      "op": "SWAP1"
    },
    "1402": {
      "op": "MSTORE"
    },
    "1403": {
      "op": "SWAP1"
    },
    "1404": {
      "jump": "o",
      "op": "JUMP"
    },
    "1405": {
      "op": "JUMPDEST"
    },
    "1406": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1408": {
      "op": "DUP2"
    },
    "1409": {
      "op": "MSTORE"
    },
    "1410": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1412": {
      "op": "PUSH2",
      "value": "0x54E"
    },
    "1415": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1417": {
      "op": "DUP4"
    },
    "1418": {
      "op": "ADD"
    },
    "1419": {
      "op": "DUP5"
    },
    "1420": {
      "op": "PUSH2",
      "value": "0x4B6"
    },
    "1423": {
      "jump": "i",
      "op": "JUMP"
    },
    "1424": {
      "op": "JUMPDEST"
    },
    "1425": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1430": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1432": {
      "op": "SHL"
    },
    "1433": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1435": {
      "op": "MSTORE"
    },
    "1436": {
      "op": "PUSH1",
      "value": "0x32"
    },
    "1438": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1440": {
      "op": "MSTORE"
    },
    "1441": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1443": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1445": {
      "op": "REVERT"
    },
    "1446": {
      "op": "JUMPDEST"
    },
    "1447": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1452": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1454": {
      "op": "SHL"
    },
    "1455": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1457": {
      "op": "MSTORE"
    },
    "1458": {
      "op": "PUSH1",
      "value": "0x11"
    },
    "1460": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1462": {
      "op": "MSTORE"
    },
    "1463": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1465": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1467": {
      "op": "REVERT"
    },
    "1468": {
      "op": "JUMPDEST"
    },
    "1469": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1471": {
      "op": "DUP3"
    },
    "1472": {
      "op": "NOT"
    },
    "1473": {
      "op": "DUP3"
    },
    "1474": {
      "op": "GT"
    },
    "1475": {
      "op": "ISZERO"
    },
    "1476": {
      "op": "PUSH2",
      "value": "0x5CF"
    },
    "1479": {
      "op": "JUMPI"
    },
    "1480": {
      "op": "PUSH2",
      "value": "0x5CF"
    },
    "1483": {
      "op": "PUSH2",
      "value": "0x5A6"
    },
    "1486": {
      "jump": "i",
      "op": "JUMP"
    },
    "1487": {
      "op": "JUMPDEST"
    },
    "1488": {
      "op": "POP"
    },
    "1489": {
      "op": "ADD"
    },
    "1490": {
      "op": "SWAP1"
    },
    "1491": {
      "jump": "o",
      "op": "JUMP"
    },
    "1492": {
      "op": "JUMPDEST"
    },
    "1493": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1495": {
      "op": "DUP2"
    },
    "1496": {
      "op": "DUP2"
    },
    "1497": {
      "op": "SHR"
    },
    "1498": {
      "op": "SWAP1"
    },
    "1499": {
      "op": "DUP3"
    },
    "1500": {
      "op": "AND"
    },
    "1501": {
      "op": "DUP1"
    },
    "1502": {
      "op": "PUSH2",
      "value": "0x5E8"
    },
    "1505": {
      "op": "JUMPI"
    },
    "1506": {
      "op": "PUSH1",
      "value": "0x7F"
    },
    "1508": {
      "op": "DUP3"
    },
    "1509": {
      "op": "AND"
    },
    "1510": {
      "op": "SWAP2"
    },
    "1511": {
      "op": "POP"
    },
    "1512": {
      "op": "JUMPDEST"
    },
    "1513": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "1515": {
      "op": "DUP3"
    },
    "1516": {
      "op": "LT"
    },
    "1517": {
      "op": "DUP2"
    },
    "1518": {
      "op": "EQ"
    },
    "1519": {
      "op": "ISZERO"
    },
    "1520": {
      "op": "PUSH2",
      "value": "0x609"
    },
    "1523": {
      "op": "JUMPI"
    },
    "1524": {
      "op": "PUSH4",
      "value": "0x4E487B71"
    },
    "1529": {
      "op": "PUSH1",
      "value": "0xE0"
    },
    "1531": {
      "op": "SHL"
    },
    "1532": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1534": {
      "op": "MSTORE"
    },
    "1535": {
      "op": "PUSH1",
      "value": "0x22"
    },
    "1537": {
      "op": "PUSH1",
      "value": "0x4"
    },
    "1539": {
      "op": "MSTORE"
    },
    "1540": {
      "op": "PUSH1",
      "value": "0x24"
    },
    "1542": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1544": {
      "op": "REVERT"
    },
    "1545": {
      "op": "JUMPDEST"
    },
    "1546": {
      "op": "POP"
    },
    "1547": {
      "op": "SWAP2"
    },
    "1548": {
      "op": "SWAP1"
    },
    "1549": {
      "op": "POP"
    },
    "1550": {
      "jump": "o",
      "op": "JUMP"
    },
    "1551": {
      "op": "JUMPDEST"
    },
    "1552": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1554": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "1556": {
      "op": "NOT"
    },
    "1557": {
      "op": "DUP3"
    },
    "1558": {
      "op": "EQ"
    },
    "1559": {
      "op": "ISZERO"
    },
    "1560": {
      "op": "PUSH2",
      "value": "0x623"
    },
    "1563": {
      "op": "JUMPI"
    },
    "1564": {
      "op": "PUSH2",
      "value": "0x623"
    },
    "1567": {
      "op": "PUSH2",
      "value": "0x5A6"
    },
    "1570": {
      "jump": "i",
      "op": "JUMP"
    },
    "1571": {
      "op": "JUMPDEST"
    },
    "1572": {
      "op": "POP"
    },
    "1573": {
      "op": "PUSH1",
      "value": "0x1"
    },
    "1575": {
      "op": "ADD"
    },
    "1576": {
      "op": "SWAP1"
    },
    "1577": {
      "jump": "o",
      "op": "JUMP"
    }
  },
  "sha1": "ce72045b6663ab8bca27c57e94056863a40d5c85",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.0 <0.9.0;\ncontract Voting {\n \n    // It will represent a single voter.\n    struct Voter {\n        bool voted;  // if true, that person already voted\n        uint vote;   // index of the voted proposal\n    }\n       enum ELECTION_STATE{\n        OPEN,CLOSED\n    }\n    string public winnerName;\n    ELECTION_STATE public election_state;\n    // This is a type for a single Candidate.\n    struct Candidate {\n        string name;   // short name (up to 32 bytes)\n        uint voteCount; // number of accumulated votes\n    }\n\n    address public chairperson;\n\n    // This declares a state variable that\n    // stores a `Voter` struct for each possible address.\n    mapping(address => Voter) public voters;\n\n    // A dynamically-sized array of `Candidate` structs.\n    Candidate[] public candidates;\n\n    \n    constructor(string[] memory candidateNames) {\n        chairperson = msg.sender;\n        election_state=ELECTION_STATE.OPEN;\n        for (uint i = 0; i < candidateNames.length; i++) {\n            candidates.push(Candidate({\n                name: candidateNames[i],\n                voteCount: 0\n            }));\n        }\n    }\n\n    \n    /// Give your vote\n    function vote(uint candidate) public {\n        Voter storage sender = voters[msg.sender];\n        // require(election_state==ELECTION_STATE.OPEN, \"voting closed.\");\n        // require(!sender.voted, \"Already voted.\");\n        sender.voted = true;\n        sender.vote = candidate;\n\n      \n        candidates[candidate].voteCount += 1;\n    }\n\n \n    function winningCandidate() public view\n            returns (uint winningCandidate_)\n    {\n        uint winningVoteCount = 0;\n        for (uint p = 0; p < candidates.length; p++) {\n            if (candidates[p].voteCount > winningVoteCount) {\n                winningVoteCount = candidates[p].voteCount;\n                winningCandidate_ = p;\n            }\n        }\n    }\n\n    function getWinnerName() public \n    {\n        election_state=ELECTION_STATE.CLOSED;\n        winnerName = candidates[winningCandidate()].name;\n    }\n}",
  "sourceMap": "64:2023:0:-:0;;;854:325;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;908:11;:24;;-1:-1:-1;;;;;;942:34:0;922:10;908:24;;-1:-1:-1;;942:34:0;;;;-1:-1:-1;986:187:0;1007:14;:21;1003:1;:25;986:187;;;1049:10;1065:96;;;;;;;;1099:14;1114:1;1099:17;;;;;;;;:::i;:::-;;;;;;;;;;;;1065:96;;1145:1;1065:96;;;;;;1049:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;1030:3;;;;;:::i;:::-;;;;986:187;;;;854:325;64:2023;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;64:2023:0;;;-1:-1:-1;64:2023:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;14:127:1;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:275;217:2;211:9;282:2;263:13;;-1:-1:-1;;259:27:1;247:40;;-1:-1:-1;;;;;302:34:1;;338:22;;;299:62;296:88;;;364:18;;:::i;:::-;400:2;393:22;146:275;;-1:-1:-1;146:275:1:o;426:1957::-;531:6;562:2;605;593:9;584:7;580:23;576:32;573:52;;;621:1;618;611:12;573:52;648:16;;-1:-1:-1;;;;;713:14:1;;;710:34;;;740:1;737;730:12;710:34;778:6;767:9;763:22;753:32;;804:4;844:7;839:2;835;831:11;827:25;817:53;;866:1;863;856:12;817:53;895:2;889:9;917:2;913;910:10;907:36;;;923:18;;:::i;:::-;969:2;966:1;962:10;992:28;1016:2;1012;1008:11;992:28;:::i;:::-;1054:15;;;1124:11;;;1120:20;;;1085:12;;;;1152:19;;;1149:39;;;1184:1;1181;1174:12;1149:39;1216:2;1212;1208:11;1197:22;;1228:1125;1244:6;1239:3;1236:15;1228:1125;;;1323:3;1317:10;1359:2;1346:11;1343:19;1340:109;;;1403:1;1432:2;1428;1421:14;1340:109;1472:20;;1527:2;1519:11;;1515:25;-1:-1:-1;1505:123:1;;1582:1;1611:2;1607;1600:14;1505:123;1666:2;1662;1658:11;1652:18;1694:2;1689:3;1686:11;1683:37;;;1700:18;;:::i;:::-;1746:52;1770:12;;;-1:-1:-1;;1766:26:1;1762:35;;1746:52;:::i;:::-;1825:3;1818:5;1811:18;1853:2;1898:7;1892:3;1886;1882:2;1878:12;1874:22;1871:35;1868:128;;;1948:1;1978:3;1973;1966:16;1868:128;2018:1;2032:142;2046:3;2043:1;2040:10;2032:142;;;2142:10;;;2138:20;;2132:27;2112:13;;;2108:22;;2101:59;2058:10;;2032:142;;;2196:3;2193:1;2190:10;2187:93;;;2264:1;2259:2;2253:3;2246:5;2242:15;2238:24;2231:35;2187:93;-1:-1:-1;;2293:18:1;;-1:-1:-1;;1261:12:1;;;;2331;;;;1228:1125;;;2372:5;426:1957;-1:-1:-1;;;;;;;;;;426:1957:1:o;2520:127::-;2581:10;2576:3;2572:20;2569:1;2562:31;2612:4;2609:1;2602:15;2636:4;2633:1;2626:15;2652:232;2691:3;-1:-1:-1;;2712:17:1;;2709:140;;;2771:10;2766:3;2762:20;2759:1;2752:31;2806:4;2803:1;2796:15;2834:4;2831:1;2824:15;2709:140;-1:-1:-1;2876:1:1;2865:13;;2652:232::o;2889:380::-;2968:1;2964:12;;;;3011;;;3032:61;;3086:4;3078:6;3074:17;3064:27;;3032:61;3139:2;3131:6;3128:14;3108:18;3105:38;3102:161;;;3185:10;3180:3;3176:20;3173:1;3166:31;3220:4;3217:1;3210:15;3248:4;3245:1;3238:15;3102:161;;2889:380;;;:::o;:::-;64:2023:0;;;;;;",
  "sourcePath": "contracts/Voting.sol",
  "type": "contract"
}